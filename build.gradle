buildscript {
    dependencies {
        // if using Stub Runner (consumer side) only remove this dependency
        classpath "org.springframework.cloud:spring-cloud-contract-gradle-plugin:1.0.3.RELEASE"
    }
}

plugins {
    id "org.asciidoctor.convert" version "1.5.2"
    id 'org.springframework.boot' version '1.5.1.RELEASE'
    id "io.spring.dependency-management" version "1.0.0.RELEASE"
}
apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: "jacoco"
apply plugin: 'checkstyle'
apply plugin: 'spring-cloud-contract'


group = "com.restbucks.courts"
version = "0.0.1"

ext {
    snippetsDir = file('build/generated-snippets')
    lombokVersion = "1.16.12"
}

repositories {
    mavenCentral()
}

dependencyManagement {
    imports {
        mavenBom 'org.springframework.cloud:spring-cloud-contract-dependencies:1.0.3.RELEASE'
    }
}


dependencies {
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"

    compile "org.springframework.boot:spring-boot-starter-web"
    compile "org.springframework.boot:spring-boot-starter-hateoas"

    testCompile group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.4.7'

    testCompile("org.springframework.boot:spring-boot-starter-test")
    testCompile('junit:junit:4.12') {
        exclude group: 'org.hamcrest'
    }
    testCompile 'org.hamcrest:hamcrest-library:1.3'
    testCompile 'org.springframework.restdocs:spring-restdocs-mockmvc:1.1.2.RELEASE'
    testCompile 'org.springframework.cloud:spring-cloud-starter-contract-verifier'
}

idea {
    module {
        scopes.COMPILE.plus += [configurations.compileOnly]
    }
}

checkstyle {
    configFile = file("config/checkstyle.xml")
    toolVersion = "7.4"
}

checkstyleTest.exclude "**/ContractVerifierTest**" // exclude generated sources

// fail the build for checkstyle warning, workaround for https://github.com/gradle/gradle/issues/881
tasks.withType(Checkstyle).each { checkstyleTask ->
    checkstyleTask.doLast {
        reports.all { report ->
            def outputFile = report.destination
            if (outputFile.exists() && outputFile.text.contains("<error ")) {
                throw new GradleException("There were checkstyle warnings! For more info check $outputFile")
            }
        }
    }
}

asciidoctor {
    attributes 'snippets': snippetsDir
    inputs.dir snippetsDir
    dependsOn test
}

jar {
    dependsOn asciidoctor
    from("${asciidoctor.outputDir}/html5") {
        into 'static/docs'
    }
}

test {
    exclude "**/*Learning*" //exclude learning test
    outputs.dir snippetsDir
}

test.finalizedBy jacocoTestReport

contracts {
    baseClassForTests = 'com.restbucks.courtbooking.http.MvcTest'
    // fully qualified name to a class that will be the base class for your generated test classes
    basePackageForTests = 'com.restbucks.courtbooking.http'
}

compileJava.dependsOn generateContractTests

task installGitHooks(type: Copy) {
    from new File(rootProject.rootDir, 'config/pre-commit')
    into {
        new File(rootProject.rootDir, '.git/hooks')
    }
    fileMode 0755
}

build.dependsOn installGitHooks

task wrapper(type: Wrapper) {
    gradleVersion = '3.3'
}